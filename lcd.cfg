[display]
lcd_type = uc1701
cs_pin = EXP1_3
a0_pin = EXP1_4
rst_pin = EXP1_5
spi_software_sclk_pin = EXP2_2
spi_software_mosi_pin = EXP2_6
spi_software_miso_pin = EXP2_1
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2
menu_timeout = 15
contrast = 63
display_group = __voron_display

[neopixel neo_display]
pin = EXP1_6
chain_count = 3
initial_red = 1.0
initial_green = 0.0
initial_blue = 0.6
color_order = RGB

#[output_pin _BEEPER]
#pin: EXP1_1
#pwm: TRUE
#value: 0
#shutdown_value: 0
# PWM frequency : 0.001 = 1ms will give a base tone of 1kHz
#cycle_time: 0.0024

[include splash.cfg]

# add to use the click pin also to switch on display
[duplicate_pin_override]
pins: EXP1_2

# this solution is purly a workaround to switch on the display
# when pressing the menu button. It has the following limitaions:
#   - As it is handled as normal gcode it can take a few sec to
#     execute the gcode and light up
#   - At blocking gcodes e.g M190 it will executed after that finished
#   - You need to add _LCD_INIT_OFF manual to each menu item you 
#     execute with the menu.exit methode 
[gcode_button click_button_display]
pin: ^!EXP1_2
press_gcode:
  {% if printer.menu.running|lower == 'false' %}
    _DISPLAY_ON
  {% endif %}
release_gcode:
  # running is already low again wenn you leave the menu
  {% if printer.menu.running|lower == 'false' %}
    UPDATE_DELAYED_GCODE ID=_LCD_INIT_OFF DURATION=10
  {% endif %}

#####################################################################
# 	Glyph definition
#####################################################################
[display_glyph chamber]
data:
  ................
  ****************
  *..............*
  *..............*
  *.....****.....*
  *.***.*..*.***.*
  *.....****.....*
  *......**......*
  *..............*
  *.************.*
  *...********...*
  *...*......*...*
  *...*......*...*
  *...*......*...*
  ****************
  ................

[display_glyph feedrate]
data:
  ................
  ................
  ................
  ......******....
  ....**********..
  ...****....****.
  ..***........**.
  .***..........*.
  .**..*..........
  ***...*.........
  **.....*........
  **......**......
  **......***.....
  **.......**.....
  ................
  ................
    
[display_glyph bed]
data:
  ................
  ................
  ................
  ................
  ................
  ................
  ................
  ................
  ................
  ................
  ...**********...
  ..*..........*..
  .*............*.
  *..............*
  ****************
  ................

[display_glyph bed_heat1]
data:
  ................
  ......*...*.....
  ......*...*.....
  .....*...*......
  .....*...*......
  ......*...*.....
  ......*...*.....
  .....*...*......
  .....*...*......
  ................
  ...**********...
  ..*..........*..
  .*............*.
  *..............*
  ****************
  ................

[display_glyph bed_heat2]
data:
  ................
  .....*...*......
  .....*...*......
  ......*...*.....
  ......*...*.....
  .....*...*......
  .....*...*......
  ......*...*.....
  ......*...*.....
  ................
  ...**********...
  ..*..........*..
  .*............*.
  *..............*
  ****************
  ................

[display_glyph extruder1]
data:
  ..************..
  ..************..
  ......****......
  ....********....
  ....********....
  .....******.....
  ......****......
  .......**.......
  ................
  ..*******.......
  .*..............
  .*..............
  ..************..
  ..............*.
  ..............*.
  .......*******..

[display_glyph extruder2]
data:
  ..************..
  ..************..
  ......****......
  ....********....
  ....********....
  .....******.....
  ......****......
  .......**.......
  ................
  .......**.......
  ................
  ................
  ................
  ................
  ................
  ................

[display_glyph extruder3]
data:
  ..************..
  ..************..
  ......****......
  ....********....
  ....********....
  .....******.....
  ......****......
  .......**.......
  ................
  ..*******.......
  .*..............
  .*..............
  ..******........
  ................
  ................
  ................

[display_glyph voron]
data:
    1111111001111111
    1111100000011111
    1111000000001111
    1100000000000011
    1000001100110001
    1000011001100001
    1000110011000001
    1001100110000001
    1000000110011001
    1000001100110001
    1000011001100001
    1000110011000001
    1110000000000111
    1111000000001111
    1111100000011111
    1111111001111111

[display_glyph voroninv]
data:
    0000001110000000
    0000111111100000
    0001111111110000
    0111111111111100
    1111100111001110
    1111001110011110
    1110011100111110
    1100111001111110
    1111110011100110
    1111100111001110
    1111001110011110
    1110011100111110
    0111111111111100
    0001111111110000
    0000111111100000
    0000001110000000
    
#####################################################################
# 	Display Data definition
#####################################################################
[display_data __voron_display chamber]
position: 2, 0
text:
    {% if 'temperature_sensor chamber' in printer %}
		{% set chamber = printer['temperature_sensor chamber'] %}
		~chamber~ { "%2.0f" % (chamber.temperature,) }~degrees~
    {% else %}
	{% endif %}


[display_template _extruder_temperature]
param_heater_name: "extruder"
text:
  {% if param_heater_name in printer %}
    {% set heater = printer[param_heater_name] %}
    # Show glyph
    {% if param_heater_name == "extruder" %}
      {% if heater.target %}
        {% set frame = (printer.toolhead.estimated_print_time|int % 3) + 1 %}
        ~extruder{frame}~
      {% else %}
        ~extruder~
      {% endif %}
    {% endif %}
    # Show temperature
    { "%3.0f" % (heater.temperature,) }
    # Optionally show target
    {% if heater.target and (heater.temperature - heater.target)|abs > 2 %}
      ~right_arrow~
      { "%0.0f" % (heater.target,) }
    {% endif %}
    ~degrees~
  {% endif %}

[display_template _heater_bed_temperature]
param_heater_name: "heater_bed"
text:
  {% if param_heater_name in printer %}
    {% set heater = printer[param_heater_name] %}
    # Show glyph
    {% if param_heater_name == "heater_bed" %}
      {% if heater.target %}
        {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
        ~bed_heat{frame}~
      {% else %}
        ~bed~
      {% endif %}
    {% endif %}
    # Show temperature
    { "%3.0f" % (heater.temperature,) }
    # Optionally show target
    {% if heater.target and (heater.temperature - heater.target)|abs > 2 %}
      ~right_arrow~
      { "%0.0f" % (heater.target,) }
    {% endif %}
    ~degrees~
  {% endif %}


[display_data __voron_display extruder]
position: 0, 0
text: { render("_extruder_temperature", param_heater_name="extruder") }

[display_data __voron_display fan]
position: 0, 10
text:
  {% if 'fan' in printer %}
    {% set speed = printer.fan.speed %}
    {% if speed %}
      {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
      ~fan{frame}~
    {% else %}
      ~fan1~
    {% endif %}
    { "{:>4.0%}".format(speed) }
  {% endif %}

[display_data __voron_display bed]
position: 1, 0
text: { render("_heater_bed_temperature", param_heater_name="heater_bed") }

[display_data __voron_display progress_text]
position: 1, 10
text:
  {% set progress = printer.display_status.progress %}
  { "{:^6.0%}".format(progress) }
  
[display_data __voron_display progress_text2]
position: 1, 10
text:
  {% set progress = printer.display_status.progress %}
  { draw_progress_bar(1, 10, 6, progress) }

[display_data __voron_display printing_time]
position: 2, 10
text:
  {% set ptime = printer.idle_timeout.printing_time %}
  { "%02d:%02d" % (ptime // (60 * 60), (ptime // 60) % 60) }
  
#####################################################################
# 	Bepper Macro
#####################################################################
#  M300 [P<ms>] [S<Hz>]
#  P is the tone duration, S the tone frequency.
#  The frequency won't be pitch perfect.
[gcode_macro M300]
description: Set Beeper value
gcode:
    # set default parameter value
    {% set freq = params.S|default(440)|float %}
    {% set time = params.P|default(100)|int %}
    {% if S|float != 0 %}
        SET_PIN PIN=_BEEPER VALUE=0.3 CYCLE_TIME={1/freq}
    {% endif %}
    G4 P{time}
    SET_PIN PIN=_BEEPER VALUE=0
    
