[display]
menu_root: __voron

#####################################
#               MAIN                #
#####################################

[menu __voron]
type: list
name: Main Menu


#####################################
#               TUNE                #
#####################################

[menu __voron __tune]
type: list
name: Tune
enable: {(printer.print_stats.state == "paused") or (printer.idle_timeout.state == "Printing")}

[menu __voron __tune __flow]
type: input
name: Flow: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.extrude_factor}
input_min: 0.01
input_max: 2
input_step: 0.01
realtime: True
gcode:
    M221 S{'%d' % (menu.input*100)}

[menu __voron __tune __offsetz]
type: input
name: Z Offset:{'%05.3f' % menu.input}
input: {printer.gcode_move.homing_origin.z}
input_min: -5
input_max: 5
input_step: 0.005
realtime: True
gcode:
    SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

[menu __voron __tune __cancel]
type: command
name: Cancel Print
enable:	{printer.idle_timeout.state == "Printing"}
gcode:
	CANCEL_PRINT
	{menu.exit(update)}

[menu __voron __tune __pause]
type: command
name: Pause  Print
enable: {printer.print_stats.state == "printing"}
gcode:
	PAUSE
	{menu.back(update)}

[menu __voron __tune __resume]
type: command
name: Resume Print
enable: {printer.print_stats.state == "paused"}
gcode:
	RESUME
	{menu.exit(update)}

[menu __voron __tune __set_b2b]
type: input
enable: {'gcode_macro TOGGLE_BACK_TO_BACK' in printer}
name: Set B2B: {['true','false'][menu.input|int]}
input: 0
input_min: 0
input_max: 1
gcode:
    {%- if menu.event != 'long_click' -%}
        {menu.exit(True)}
        {% if menu.input|int == 0 %}
            SAVE_VARIABLE VARIABLE=b2b_state VALUE='"true"'
        {% elif menu.input|int == 1 %}
            SAVE_VARIABLE VARIABLE=b2b_state VALUE='"false"'
        {% endif %}
    {%- elif menu.event == 'long_click' -%}
        {menu.back(true)}
    {%- endif -%}


#####################################
#             CONTROL               #
#####################################

[menu __voron __control]
type: list
name: Control

[menu __voron __control __disable]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: Steppers off
gcode:
    M84
    M18

[menu __voron __control __home]
type: command
name: Home All
gcode: G28

[menu __voron __control __homez]
type: command
enable:	{not printer.idle_timeout.state == "Printing"}
name: Home Z
gcode: G28 Z

[menu __voron __control __homexy]
type: command
enable:	{not printer.idle_timeout.state == "Printing"}
name: Home X/Y
gcode: G28 X Y

[menu __voron __control __disable]
type: command
enable:	{not printer.idle_timeout.state == "Printing"}
name: Steppers off
gcode:
    M84
    M18

[menu __voron __control __move_1mm]
type: list
enable:	{not printer.idle_timeout.state == "Printing"}
name: Move 1mm

[menu __voron __control __move_1mm __axis_x]
type: input
name: Move X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __voron __control __move_1mm __axis_y]
type: input
name: Move Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __voron __control __move_1mm __axis_z]
type: input
name: Move Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: {printer.toolhead.axis_maximum.z}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __voron __control __move_1mm __axis_e]
type: input
name: Move E:{'%+06.1f' % menu.input}
input: 0
input_min: -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max: {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis


#####################################
#            TEMPERATURE            #
#####################################

[menu __voron __temp]
type: list
name: Temperature
[menu __voron __temp __hotend0_target]
type: input
enable: {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name: {"Ext:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 5
gcode: M104 T0 S{'%.0f' % menu.input}
[menu __voron __temp __hotbed_target]
type: input
enable: {'heater_bed' in printer}
name: {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input: {printer.heater_bed.target}
input_min: 0
input_max: {printer.configfile.config.heater_bed.max_temp}
input_step: 5
gcode: M140 S{'%.0f' % menu.input}
[menu __voron __temp __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Turn off all
gcode:
    M104 S0
    M140 S0
	{menu.exit(update)}


#####################################
#             FILAMENT              #
#####################################

[menu __voron __filament]
type: list
name: Filament
enable: {((('gcode_macro UNLOAD_FILAMENT' in printer) and (printer.print_stats.state == paused)) or ('gcode_macro UNLOAD_FILAMENT' in printer) and (not printer.idle_timeout.state == "Printing"))}

[menu __voron __filament __load]
type: input
enable: {'gcode_macro LOAD_FILAMENT' in printer}
index: 0
name: Load: {['ABS','ASA','FLEX','NYLON','PC','PET','PLA'][menu.input|int]}
input: 0
input_min: 0
input_max: 6
gcode:
  {menu.exit(update)}
  {%- if menu.input|int == 0 -%}
    LOAD_FILAMENT I=1
  {%- elif menu.input|int == 1 -%}
    LOAD_FILAMENT I=4
  {%- elif menu.input|int == 2 -%}
    LOAD_FILAMENT I=3
  {%- elif menu.input|int == 3  -%}
    LOAD_FILAMENT I=5
  {%- elif menu.input|int == 4  -%}
    LOAD_FILAMENT I=6
  {%- elif menu.input|int == 5  -%}
    LOAD_FILAMENT I=2
  {%- elif menu.input|int == 6  -%}
    LOAD_FILAMENT I=0
  {%- endif -%}

[menu __voron __filament __unload]
type: command
name: Unload
enable: {'gcode_macro UNLOAD_FILAMENT' in printer}
gcode:
	UNLOAD_FILAMENT
	{menu.exit(update)}


#####################################
#              SETUP                #
#####################################

[menu __voron __setup]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Setup

[menu __voron __setup __calibration]
type: list
name: Calibration

[menu __voron __setup __calibration __pid_tuning]
type: input
name: PID Tune:{['Hotend','Bed'][menu.input|int]}
input: 0
input_min: 0
input_max: 1
gcode:
    {%- if menu.event != 'long_click' -%}
        {menu.exit(true)}
        {% if menu.input|int == 0 %}
            PID_CALIBRATE HEATER=extruder TARGET=250 WRITE_FILE=1
        {% elif menu.input|int == 1 %}
            PID_CALIBRATE HEATER=heater_bed TARGET=115 WRITE_FILE=1
        {% endif %}
    {%- elif menu.event == 'long_click' -%}
        {menu.exit(true)}
    {%- endif -%}

[menu __voron __setup __calibration __bed_screws_adjust]
type: command
name: Bed Screws
gcode:
    {% if homed_axes != "xyz" %}
        G90
        G28
    {% endif %}
    BED_SCREWS_ADJUST

[menu __voron __setup __calibration __adjusted_accept]
type: input
enable: {printer.bed_screws == "true"}
name: Send: {['Adjusted','Accept'][menu.input|int]}
input: 0
input_min: 0
input_max: 1
gcode:
    {%- if menu.event != 'long_click' -%}
        {% if menu.input|int == 0 %}
            ADJUSTED
        {% elif menu.input|int == 1 %}
            ACCEPT
        {% endif %}
    {%- elif menu.event == 'long_click' -%}
        {menu.exit(true)}
    {%- endif -%}

[menu __voron __setup __calibration __resonances_test]
type: command
name: Resonances Test
gcode:
  G28                                                   ; home if needed
  TURN_OFF_HEATERS                                      ; turn off heaters
  M107                                                  ; turn off fan
  _PRINT_AR T="INPUT SHAPER: Check if sensor"
  MEASURE_AXES_NOISE                                    ; get noise value in log
  _PRINT_AR T="INPUT SHAPER: Starting..."
  _PRINT_AR T="INPUT SHAPER: X axis"
  TEST_RESONANCES AXIS=X                                ; measure X
  _PRINT_AR T="INPUT SHAPER: Y axis"
  TEST_RESONANCES AXIS=Y                                ; measure Y
  _PRINT_AR T="INPUT SHAPER: Done"
  _PRINT_AR T="INPUT SHAPER: Graph"
  RUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER

[menu __voron __setup __calibration __belt_test]
type: command
name: Belt Test
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  G28                                                   ; home if needed
  TURN_OFF_HEATERS                                      ; turn off heaters
  M107                                                  ; turn off fan
  _PRINT_AR T="BELT TEST: Check if sensor"
  MEASURE_AXES_NOISE                                    ; get noise value in log
  _PRINT_AR T="BELT TEST: Starting ..."
  _PRINT_AR T="BELT TEST: B belt"
  TEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b
  _PRINT_AR T="BELT TEST: A belt"
  TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a
  _PRINT_AR T="BELT TEST: Done"
  _PRINT_AR T="BELT TEST: Graph"
  RUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELT

[menu __voron __setup __calibration __vibration_test]
type: command
name: VIBRATIONS&SPEED
gcode:
    {% set size = params.SIZE|default(60)|int %} # size of the area where the movements are done
    {% set direction = params.DIRECTION|default('XY') %} # can be set to either XY, AB, ABXY, A, B, X, Y, Z
    {% set z_height = params.Z_HEIGHT|default(20)|int %} # z height to put the toolhead before starting the movements
    {% set verbose = params.VERBOSE|default(true) %} # Wether to log the current speed in the console

    {% set min_speed = params.MIN_SPEED|default(20)|int * 60 %} # minimum feedrate for the movements
    {% set max_speed = params.MAX_SPEED|default(200)|int * 60 %} # maximum feedrate for the movements
    {% set speed_increment = params.SPEED_INCREMENT|default(2)|int * 60 %} # feedrate increment between each move
    {% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %} # travel feedrate between moves

    {% set accel_chip = params.ACCEL_CHIP|default("adxl345") %} # ADXL chip name in the config

    #
    # COMPUTED VALUES
    #
    {% set mid_x = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set mid_y = printer.toolhead.axis_maximum.y|float / 2 %}

    {% set direction_factor = {
        'XY'  : {
            'start' : {'x': -0.5, 'y': -0.5 },
            'move_factors' : {
                '0' : {'x': 0.5, 'y': -0.5, 'z': 0.0 },
                '1' : {'x': 0.5, 'y': 0.5, 'z': 0.0 },
                '2' : {'x': -0.5, 'y': 0.5, 'z': 0.0 },
                '3' : {'x': -0.5, 'y': -0.5, 'z': 0.0 }
                }
            },
        'AB' : {
            'start' : {'x': 0.0, 'y': 0.0 },
            'move_factors' : {
                '0' : {'x': 0.5, 'y': -0.5, 'z': 0.0 },
                '1' : {'x': -0.5, 'y': 0.5, 'z': 0.0 },
                '2' : {'x': 0.0, 'y': 0.0, 'z': 0.0 },
                '3' : {'x': 0.5, 'y': 0.5, 'z': 0.0 },
                '4' : {'x': -0.5, 'y': -0.5, 'z': 0.0 },
                '5' : {'x': 0.0, 'y': 0.0, 'z': 0.0 }
                }
            },
        'ABXY' : {
            'start' : {'x': -0.5, 'y': 0.5 },
            'move_factors' : {
                '0' : {'x': -0.5, 'y': -0.5, 'z': 0.0 },
                '1' : {'x': 0.5, 'y': -0.5, 'z': 0.0 },
                '2' : {'x': -0.5, 'y': 0.5, 'z': 0.0 },
                '3' : {'x': 0.5, 'y': 0.5, 'z': 0.0 },
                '4' : {'x': -0.5, 'y': -0.5, 'z': 0.0 },
                '5' : {'x': -0.5, 'y': 0.5, 'z': 0.0 }
                }
            },
        'B'  : {
            'start' : {'x': 0.5, 'y': 0.5 },
            'move_factors' : {
                '0' : {'x': -0.5, 'y': -0.5, 'z': 0.0 },
                '1' : {'x': 0.5, 'y': 0.5, 'z': 0.0 }
                }
            },
        'A'  : {
            'start' : {'x': -0.5, 'y': 0.5 },
            'move_factors' : {
                '0' : {'x': 0.5, 'y': -0.5, 'z': 0.0 },
                '1' : {'x': -0.5, 'y': 0.5, 'z': 0.0 }
                }
            },
        'X'  : {
            'start' : {'x': -0.5, 'y': 0.0 },
            'move_factors' : {
                '0' : {'x': 0.5, 'y': 0.0, 'z': 0.0 },
                '1' : {'x': -0.5, 'y': 0.0, 'z': 0.0 }
                }
            },
        'Y'  : {
            'start' : {'x': 0.0, 'y': 0.5 },
            'move_factors' : {
                '0' : {'x': 0.0, 'y': -0.5, 'z': 0.0 },
                '1' : {'x': 0.0, 'y': 0.5, 'z': 0.0 }
                }
            },
        'Z'  : {
            'start' : {'x': 0.0, 'y': 0.0 },
            'move_factors' : {
                '0' : {'x': 0.0, 'y': 0.0, 'z': 1.0 },
                '1' : {'x': 0.0, 'y': 0.0, 'z': 0.0 }
                }
            }
        }
    %}

    #
    # STARTING...
    #
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home printer first!") }
    {% endif %}

    {% if (size / (max_speed / 60)) < 0.25 %}
        { action_raise_error("SIZE is too small for this MAX_SPEED. Increase SIZE or decrease MAX_SPEED!") }
    {% endif %}

    {% if not (direction in direction_factor) %}
        { action_raise_error("DIRECTION is not valid. Only XY, AB, ABXY, A, B, X, Y or Z is allowed!") }
    {% endif %}

    {action_respond_info("")}
    {action_respond_info("Starting speed and vibration calibration")}
    {action_respond_info("This operation can not be interrupted by normal means. Hit the \"emergency stop\" button to stop it if needed")}
    {action_respond_info("")}

    SAVE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION

    G90

    # Going to the start position
    G1 Z{z_height}
    G1 X{mid_x + (size * direction_factor[direction].start.x) } Y{mid_y + (size * direction_factor[direction].start.y)} F{feedrate_travel}

    # vibration pattern for each frequency
    {% for curr_speed in range(min_speed, max_speed + speed_increment) %}
        {% if (curr_speed - min_speed) % speed_increment == 0 %}
            {% if verbose %}
                RESPOND MSG="Current speed: {(curr_speed / 60)|int} mm/s"
            {% endif %}

            ACCELEROMETER_MEASURE CHIP={accel_chip}
            {% for key, factor in direction_factor[direction].move_factors|dictsort %}
                G1 X{mid_x + (size * factor.x) } Y{mid_y + (size * factor.y)} Z{z_height + (size * factor.z)} F{curr_speed}
            {% endfor %}
            ACCELEROMETER_MEASURE CHIP={accel_chip} NAME=sp{(curr_speed / 60)|int}n1

            G4 P300
            M400
        {% endif %}
    {% endfor %}

    {% if verbose %}
        RESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."
    {% endif %}
    RUN_SHELL_COMMAND CMD=plot_graph PARAMS="VIBRATIONS {direction}"

    RESTORE_GCODE_STATE NAME=STATE_VIBRATIONS_CALIBRATION

[menu __voron __setup __save_config]
type: command
name: Save config
gcode:
    SAVE_CONFIG
    {menu.exit(update)}

[menu __voron __setup __restart]
type: list
name: Restart

[menu __voron __setup __restart __host_restart]
type: command
name: Restart host
gcode: RESTART

[menu __voron __setup __restart __firmware_restart]
type: command
name: Restart FW
gcode: FIRMWARE_RESTART

[menu __voron __setup __backup]
type: command
name: Backup
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg